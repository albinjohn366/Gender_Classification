# -*- coding: utf-8 -*-
"""Gender Classification.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1MceN9-Qi6BA2sLopCJC4Vk1AnZwwo7ov

# **Gender Classification**

Using nltk to predict the gender of a person by looking at the name. Training is done on the basis of the last letter of different people collected from different sources.
"""

import nltk
nltk.download('names')
from nltk.corpus import names
data_males = [(name, 'Male') for name in names.words('male.txt')]
data_females = [(name, 'Female') for name in names.words('female.txt')]

import random
data = data_males
data.extend(data_females)
random.shuffle(data)

# Splitting data for training and testing
mid_value = int(len(data) * 0.8)
train = data[:mid_value]
test = data[mid_value:]

def gender_features(name):
  features = dict()
  features['start_letter'] = name[0]
  features['end_letter'] = name[len(name) - 1]
  for i in 'abcdefghijklmnopqrstuvwxyz':
    features['no_of_{}'.format(i)] = name.lower().count(i)
  return features

# Getting the feature set
feature_set = []
for name, label in data:
  features = gender_features(name)
  feature_set.append((features, label))

# Defining the classifier
clf = nltk.NaiveBayesClassifier.train(feature_set)

# Classification on given input
sentence = input("Please enter the name\n")
feature = gender_features(sentence)
clf.classify(feature)

# Presenting probability percentage
sentence = input("Please enter the name\n")
feature = gender_features(sentence)
prob = clf.prob_classify(feature)
for i in prob.samples():
  print(i, prob.prob(i)*100, '%')